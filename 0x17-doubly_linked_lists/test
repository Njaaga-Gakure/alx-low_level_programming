#include "lists.h"

/**
 * insert_dnodeint_at_index - inserts node at a specified index
 * @h: pointer to the first node of the list
 * @idx: the index
 * @n: data to add on the new node
 * Return: pointer to the new node
 */

dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n)
{
	dlistint_t *new, *temp, *first_node, *last_node;
	unsigned int i, len;

	if (*h == NULL)
		return (NULL);

	len = dlistint_len(*h);
	if (idx == len)
		last_node = add_dnodeint_end(h, n);
		return (last_node);

	new = malloc(sizeof(dlistint_t));
	if (new == NULL)
		return (NULL);

	temp = *h;
	for (i = 0; i < idx - 1; i++)
		temp = temp->next; 
	if (i < idx)  
		return (NULL);  
	if (temp->next != NULL)  
	{   
		temp->next->prev = new;   
		new->next = temp->next;  
	}
	else   
		new->next = NULL;  
	temp->next = new;
	new->prev = temp;  
	new->n = n;
	return (new);
}

size_t dlistint_len(const dlistint_t *h)
{
	size_t node_count;

	node_count = 0;

	if (h == NULL)  
		return (node_count);
	for (; h->next != NULL; node_count++)     
		h = h->next;

	if (h->next == NULL)                
		node_count++;

	return (node_count);
}
